document = { SOI ~ (chunk)* ~ EOI }

pair  =  { type_modifier? ~ type ~ identifier ~ "=" ~ chunk }
key   = @{ identifier | string | ("[" ~ int ~ "]") }
item  =  { key ~ "=" ~ value }
table =  { "{" ~ (item ~ ","?)* ~ "}" }

value = _{
    call
  | string
  | float
  | integer
  | boolean
  | pair
  | item
  | table
  | identifier
  | ordered_comparison
  | ordered_mathematical
}

primitive = _{ identifier | call | string | float | integer | boolean | ordered_comparison | ordered_mathematical }

ordered_comparison = { "(" ~ comparison ~ ")" }
comparison = { primitive ~ (">=" | "<=" | "<" | ">" | "==") ~ primitive }

ordered_mathematical = { "(" ~ mathematical ~ ")" }
mathematical = { primitive ~ ("+" | "-" | "*" | "/") ~ primitive }

identifier      = @{ (ASCII_ALPHANUMERIC | "_" | "-" | ":" | "." | "[" | "]" | "$" | "#")+ }
generic         =  { "<" ~ (identifier ~ ","?)+ ~ ">" }
type            =  { identifier ~ generic? }
typed_parameter =  { type ~ identifier }
type_modifier   =  { "pub" | "prv" }

string = @{ "\"" ~ inner ~ "\"" }
inner  = @{ (!("\"" | "\\" | "\u{0000}" | "\u{001F}") ~ ANY)* ~ (escape ~ inner)? }

escape = @{ "\\" ~ ("b" | "t" | "n" | "f" | "r" | "\"" | "\\" | NEWLINE)? }

integer = @{ ("+" | "-")? ~ int }
float   = @{ ("+" | "-")? ~ int ~ ("." ~ digits ~ exp? | exp)? }
int     = @{ "0" | (ASCII_NONZERO_DIGIT ~ digits?) }
digits  = @{ (ASCII_DIGIT | ("_" ~ ASCII_DIGIT))+ }
exp     = @{ ("E" | "e") ~ ("+" | "-")? ~ int }

boolean = { "true" | "false" }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* }

chunk = _{ impl | function | type_alias | struct | enum | for_loop | while_loop | conditional | value | block }

for_loop = { "for" ~ "(" ~ (identifier ~ ","?)* ~ ")" ~ "in" ~ value ~ block }
while_loop = { "while" ~ primitive ~ block }
conditional = { "if" ~ primitive ~ block ~ (conditional_elseif | conditional_else)* }
conditional_else = { "else" ~ block }
conditional_elseif = { "else if" ~ primitive ~ block }

function_return = _{ "->" ~ type }
sync_modifier   = { "async" | "sync" }
function        = { type_modifier? ~ sync_modifier? ~ "fn" ~ identifier ~ "(" ~ (typed_parameter ~ ","?)* ~ ")" ~ function_return ~ block }
call            = { identifier ~ "(" ~ (chunk ~ ","?)* ~ ")" }
block           = { "{" ~ chunk* ~ "}" }

impl = { "impl" ~ identifier ~ impl_block }
impl_block = { "{" ~ method* ~ "}" }
method_modifier = { "static" | "assoc" }
method = { method_modifier? ~ sync_modifier? ~ "fn" ~ identifier ~ "(" ~ (typed_parameter ~ ","?)* ~ ")" ~ function_return ~ block }

struct       = { type_modifier? ~ "struct" ~ type ~ struct_block }
struct_type  = { type_modifier? ~ type ~ identifier ~ ";" }
struct_block = { "{" ~ struct_type* ~ "}" }

enum = {"enum" ~ identifier ~ enum_block}
enum_variant  = { pair ~ ";" }
enum_block = { "{" ~ enum_variant* ~ "}" }

type_alias = { type_modifier? ~ "type" ~ type ~ "=" ~ type }
